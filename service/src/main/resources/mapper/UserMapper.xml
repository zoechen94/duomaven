<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zoe.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.zoe.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="accountResultVO" type="com.zoe.entity.vo.UserVO">
        <id column="user_id" property="userId" jdbcType="BIGINT"></id>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <collection property="sysPermissions" ofType="com.zoe.entity.SysPermission">
            <id column="permission_id" property="id"/>
            <result column="permission_en" property="permissionEn"></result>
            <result column="permission_cn" property="permissionCn"></result>
            <result column="url" property="url"></result>
        </collection>
        <collection property="sysRoles" ofType="com.zoe.entity.SysRole">
            <id column="role_id" property="id"/>
            <result column="role_name" property="roleName"></result>
            <result column="level" property="level"></result>
        </collection>
    </resultMap>
    <sql id="Base_Column_List">
    id, password, username, account
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.zoe.entity.User">
    insert into user (id, password, username, 
      account)
    values (#{id,jdbcType=BIGINT}, #{password,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{account,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.zoe.entity.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="account != null">
                account,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="account != null">
                #{account,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.zoe.entity.User">
        update user
        <set>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zoe.entity.User">
    update user
    set password = #{password,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="selectByAccount" resultMap="accountResultVO">
select a.id as user_id,a.account,a.username,d.role_name,d.`level`,e.id as permission_id,d.id as role_id,e.url,e.permission_en,e.permission_cn from user a LEFT JOIN sys_user_role b on
a.id=b.user_id LEFT JOIN sys_role_permission c
on b.role_id=c.role_id left JOIN sys_role d
on b.role_id=d.id
LEFT JOIN sys_permission e
on c.permission_id=e.id
where account=#{account}
  </select>

    <select id="selectAll" resultMap="BaseResultMap">
        select * from user
    </select>

</mapper>